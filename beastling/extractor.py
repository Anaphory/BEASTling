import ConfigParser
import os
import StringIO
import xml.etree.ElementTree as ET

# The standard library XML parser does not give access to comments, which we
# need.  The following extended parser remedies this.  # Code taken from
# https://stackoverflow.com/a/27333347, which was in turn based on Fredrik Lundh's
# code at http://effbot.org/zone/element-pi.htm

_generated_str = "Generated by BEASTling"
_config_file_str = "Original config file:"
_proggen_str = "Configuration built programmatically"
_data_file_str = "BEASTling embedded data file"

class CommentParser(ET.XMLTreeBuilder):

   def __init__(self):
       ET.XMLTreeBuilder.__init__(self)
       # assumes ElementTree 1.2.X
       self._parser.CommentHandler = self.handle_comment

   def handle_comment(self, data):
       self._target.start(ET.Comment, {})
       self._target.data(data)
       self._target.end(ET.Comment)

def extract(filename, overwrite=False):

    messages = []

    # Parse XML file
    parser = CommentParser()
    fp = open(filename, "r")
    parser.feed(fp.read())
    fp.close()
    xml = parser.close()

    comments = [e for e in xml if e.tag == ET.Comment]
    beastling_confs = [c for c in comments if c.text.startswith(_generated_str)]
    if not len(beastling_confs) == 1:
        # Zero or several embedded configs - is this one of our files?!
        raise ValueError("%s doesn't look like a BEASTling-generated XML file" % filename)
    messages.append(write_config(beastling_confs[0].text, overwrite))
    
    data_files = [c for c in comments if c.text.startswith(_data_file_str)]
    for data_file in data_files:
        messages.append(write_data_file(data_file.text, overwrite))

    return [msg for msg in messages if msg]

def write_config(comment_text, overwrite):
    lines = comment_text.split("\n")
    assert lines[1] in (_config_file_str, _proggen_str)
    if lines[1] == _proggen_str:
        return "Original configuration was generated programmatically, no configuration to extract."
    config_text = "\n".join(lines[2:])
    p = ConfigParser.SafeConfigParser()
    p.readfp(StringIO.StringIO(config_text))
    if p.has_option("admin", "basename"):
        filename = "%s.conf" % p.get("admin", "basename")
    else:
        filename = "beastling.conf"
    if os.path.exists(filename) and not overwrite:
        return "BEASTling configuration file %s already exists!  Run beastling with the --overwrite option if you wish to overwrite it.\n" % filename
    fp = open(filename, "w")
    fp.write(config_text)
    fp.close()
    return "Wrote BEASTling configuration file %s.\n" % filename

def write_data_file(comment_text, overwrite):
    lines = comment_text.split("\n")
    filename = lines[0].split(":",1)[1].strip()
    if os.path.exists(filename) and not overwrite:
        return "Embedded data file %s already exists!  Run beastling with the --overwrite option if you wish to overwrite it.\n" % filename
    fp = open(filename, "w")
    fp.write("\n".join(lines[1:]))
    fp.close()
    return "Wrote embedded data file %s.\n" % filename
